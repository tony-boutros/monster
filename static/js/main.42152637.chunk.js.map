{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,yCAAW,uBAAOL,EAAMG,QAAQG,QAChC,uCAAUN,EAAMG,QAAQI,aCHnBC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAASA,GAAvBA,EAAQG,aCJtBK,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBACAZ,UAAU,SACVa,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC2BLG,G,wDA9Bb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACZR,SAAU,GACVS,YAAa,IALH,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAWc,S,oBAE7C,WAAS,IAAD,OACN,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAxB,GAAO,OAAIA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBACpG,OACE,sBAAK3B,UAAU,MAAf,UACE,yCACA,cAAC,EAAD,CAAWY,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,SAASpB,YAAY,mBACvF,cAAC,EAAD,CAAUH,SAAUiB,W,GArBVO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42152637.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.styles.css\";\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set1`} alt=\"\" />\n        <h2>Name : <br />{props.monster.name}</h2>\n        <h3>Mail:{props.monster.email}</h3>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card';\nimport './card-list.styles.css';\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map(monster => (\n                <Card key={monster.name} monster={monster} />\n            ))}\n          \n            </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (\n        <input \n        className=\"search\"\n        type = \"search\" \n        placeholder = {placeholder} \n        onChange ={ handleChange} />\n    )\n} ","import React , {Component} from 'react';\nimport { CardList } from './components/card-list/card-list';\nimport {SearchBox} from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n     monsters: [],\n     searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({monsters : users}))\n  }\n  render(){\n    const { monsters, searchField } = this.state; \n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster</h1>\n        <SearchBox handleChange={e => this.setState({searchField:e.target.value})} placeholder=\"search monster\"/>\n        <CardList monsters={filteredMonsters} />\n     \n       \n          \n        \n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}